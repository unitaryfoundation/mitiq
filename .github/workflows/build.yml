name: build

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
  push:
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Check out mitiq
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          make install requirements

      - name: Check types with mypy
        run: make check-types

      - name: Check code style/formatting
        run: make check-format

  docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out mitiq
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          make install requirements

      - name: Run the quilc & qvm Docker images
        run: |
          docker run --rm -idt -p 5000:5000 rigetti/qvm -S
          docker run --rm -idt -p 5555:5555 rigetti/quilc -R

      - name: Generate hash from all files excluding example notebooks
        id: gen_hash
        run: |
          HASH=$(find . -type f -not -path './docs/source/examples/*' | sort | xargs cat | sha256sum | awk '{print $1}')
          echo "hash=$HASH" >> $GITHUB_OUTPUT

      - name: Fetch Jupyter cache
        uses: actions/cache@v4
        with:
          path: ./docs/build/.jupyter_cache
          key: jupyter-cache-${{ steps.gen_hash.outputs.hash }}

      - name: Build and test Sphinx docs
        run: |
          export BQSKIT_DOC_CHECK_OVERRIDE=1
          export PYDEVD_DISABLE_FILE_VALIDATION=1
          make docs

      - name: Run linkcheck on 'release' PRs
        if: github.event_name == 'pull_request'
        run: |
          pr_title_lower=$(echo "${{ github.event.pull_request.title }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$pr_title_lower" == *"release"* ]]; then
            make linkcheck
          fi

  # This is to make sure Mitiq works without optional 3rd party packages like Qiskit, pyQuil, etc.
  # E.g., if we accidentally `import qiskit` in Mitiq where we shouldn't, this test will catch that.
  core:
    runs-on: ubuntu-latest
    steps:
      - name: Check out mitiq
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Mitiq
        # Since requirements.txt includes cirq, which in turn has pyquil as dependency,
        # we explicitly remove pyquil from the installed packages after installing mitiq
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip uninstall -y pyquil

      - name: Test without 3rd party packages
        run: |
          pip install pytest
          pytest mitiq/tests/test_without_third_party_packages.py

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out mitiq
        uses: actions/checkout@v4
        # Increase fetch depth to work around Codecov issue (https://github.com/codecov/codecov-action/issues/190).
        with:
          fetch-depth: 2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          make install requirements
      - name: Run the quilc & qvm Docker images
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          docker run --rm -idt -p 5000:5000 rigetti/qvm -S
          docker run --rm -idt -p 5555:5555 rigetti/quilc -R
      - name: Run all the unit tests
        run: ${{ matrix.os == 'ubuntu-latest' && 'make test-all' || 'make test' }}
      - name: Submit coverage report to Codecov
        # Only submit to Codecov once.
        if: ${{ matrix.python-version == '3.12' && matrix.os == 'ubuntu-latest'}}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
