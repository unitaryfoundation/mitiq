---
jupytext:
  text_representation:
    extension: .myst
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.10.2
kernelspec:
  display_name: Python 3
  language: python
  name: python3
---

# Mitigating the energy landscape of a variational circuit with Mitiq

+++

This tutorial shows an example in which the energy landscape for a two-qubit variational 
circuit is explored with and without error mitigation.

```{code-cell} ipython3
import matplotlib.pyplot as plt
import numpy as np
from cirq import Circuit, H, rx, CNOT, DensityMatrixSimulator, LineQubit, depolarize
from mitiq.zne import mitigate_executor

SIMULATOR = DensityMatrixSimulator()
```

## Defining the ideal variational circuit
We define a function which returns a two-qubit circuit at a specified variational angle $\gamma$.


```{code-cell} ipython3
def variational_circuit(gamma: float) -> Circuit:
    """Returns a two-qubit circuit for a given variational parameter.

    Args:
        gamma: The variational parameter.

    Returns:
        The two-qubit circuit with a fixed gamma.
    """
        
    q0, q1 = LineQubit.range(2)
        
    return Circuit([CNOT(q0, q1), rx(gamma)(q1), CNOT(q0, q1)])
   
```

We can visualize the circuit for a particular $\gamma$ as follows.

```{code-cell} ipython3
print(variational_circuit(gamma=np.pi))
```

## Defining the noisy executor
To interface with Mitiq, we now define an executor function which adds noise to the circuit and computes the
expectation value of a simple Hamiltonian $H=Z \otimes Z$, i.e., Pauli-$Z$ on each qubit. The code block
below first creates this observable, then sets a noise value, then defines the executor.

```{code-cell} ipython3
# Observable to measure
z = np.diag([1, -1])
hamiltonian = np.kron(z, z)

# Strength of noise channel
p = 0.1

def executor(circ: Circuit) -> float:
    """Simulates the execution of a circuit with depolarizing noise.

    Args:
        circ: The input circuit.

    Returns:
        The expectation value of the ZZ observable.
    """
    # Add depolarizing noise to the circuit
    circuit = circ.with_noise(depolarize(p))

    # Get the final density matrix of the circuit
    rho = SIMULATOR.simulate(circuit).final_density_matrix

    # Evaluate the ZZ expectation value
    expectation = np.real(np.trace(rho @ hamiltonian))
    return expectation
```

:::{note}
The above code block uses depolarizing noise, but any Cirq channel can be substituted in.
:::

+++

## Computing the unmitigated landscape
We now compute the unmitigated energy landscape $\langle H \rangle(\gamma) =\langle Z \otimes Z \rangle(\gamma)$
in the following code block.

```{code-cell} ipython3
gammas = np.linspace(-2 * np.pi, 2 * np.pi, 50)
expectations = [executor(variational_circuit(g)) for g in gammas]
```

The following code plots these values for visualization.

```{code-cell} ipython3
plt.figure(figsize=(8, 6))
plt.scatter(gammas, expectations, color="r", label="Unmitigated")
plt.title(rf"Energy landscape", fontsize=16)
plt.xlabel(r"Ansatz angle $\gamma$", fontsize=16)
plt.ylabel(r"$\langle H \rangle(\gamma)$", fontsize=16)
plt.legend(fontsize=14)
plt.ylim(-1, 1);
plt.show()
```

## Computing the mitigated landscape
We now repeat the same task but use Mitiq to mitigate errors.
We do so by first getting a mitigated executor as follows.

```{code-cell} ipython3
mitigated_executor = mitigate_executor(executor)
```

We then run the same code above to compute the energy landscape, but this time use the ``mitigated_executor`` instead of just the executor.

```{code-cell} ipython3
mitigated_expectations = [mitigated_executor(variational_circuit(g)) for g in gammas]
```

Let us visualize the mitigated landscape alongside the unmitigated landscape.

```{code-cell} ipython3
plt.figure(figsize=(8, 6))
plt.scatter(gammas, expectations, color="r", label="Unmitigated")
plt.scatter(gammas, mitigated_expectations, color="b", label="Mitigated")
plt.title(rf"Energy landscape", fontsize=16)
plt.xlabel(r"Variational angle $\gamma$", fontsize=16)
plt.ylabel(r"$\langle H \rangle(\gamma)$", fontsize=16)
plt.legend(fontsize=14)
plt.ylim(-1.5, 1.5);
plt.show()
```

Noise usually tends to flatten expectation values towards a constant. Therefore error mitigation 
can be used to increase the visibility the landscape and this fact can simplify the energy minimization 
which is required in most variational algorithms such as VQE or QAOA.

We also observe that the minimum of mitigated energy approximates well the theoretical ground state which is equal to $-1$. Indeed:

```{code-cell} ipython3
print(f"Theoretical groud state energy: {min(np.linalg.eigvals(hamiltonian))}")
```

## Acknowledgements

Most of the code for this example was written by Peter Karalekas.

```{code-cell} ipython3
import mitiq
mitiq.about()
```
